let mongoose,bcrypt;_07b‍.x([["default",()=>_07b‍.o]]);_07b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_07b‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]); 

const{Schema} = mongoose;

const userSchema = new Schema({
    name:{
       type:String,
       trim: true,
       required : 'Name is required' 
    },
    email: {
       type:String,
       trim: true,
       required : 'Email is required',
       unique: true
    },
   password : {
    type:String,
    required : true,
    min: 6,
    max: 64
    },
    stripe_account_id: "",
    stripe_seller: {},
    stripeSession:{}
},
{timestamps:true}
);


userSchema.pre('save', function(next){
    let user = this;

    if(user.isModified('password'))
    {
        return bcrypt.hash(user.password,12,function(err,hash){
            if(err)
            {
                _07b‍.g.console.log("Bcrypt hash error",err);
                return next(err);
            }
            user.password=hash;
            return next();
        });
    }
    else
    {
        return next();
    }

});

userSchema.methods.comparePassword = function(password,next){
 bcrypt.compare(password,this.password,function(err,match){
    if(err){
        _07b‍.g.console.log("Compare password error",err);
        return next(err,false);
    }
        // if no err , we get null
    _07b‍.g.console.log("Match Password",match);
    return next(null,match);
 });  
};


_07b‍.d(mongoose.model("User",userSchema));